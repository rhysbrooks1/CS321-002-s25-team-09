package cs321.search;

import java.sql.*;

/**
 * Executes database queries to retrieve the most frequent key values
 * stored from BTree traversals of SSH log data.
 *
 * This class is part of the search component of the OpenSSH Log Analysis system.
 * It connects to a SQLite database generated by SSHCreateBTree, which contains
 * up to nine separate tables â€” one for each type of BTree (e.g., accepted IPs, failed
 * login times, invalid users, etc.).
 *
 * Each table in the database stores key-frequency pairs obtained through an in-order
 * traversal of a BTree. This class reads from the appropriate table and returns the
 * top N entries, ordered by frequency (descending) and then by key (ascending).
 *
 * The results are printed to standard output and can be used by analysts to identify
 * patterns in SSH access behavior, detect common sources of failed logins, and flag
 * suspicious usage trends.
 *
 * This class relies on {@code SSHSearchDatabaseArguments} to handle all input validation
 * and argument extraction, ensuring that the logic here focuses purely on execution.
 */
public class SSHSearchDatabase {

    public static void main(String[] args) {
        SSHSearchDatabaseArguments parsed;

        try {
            // Parse and validate command-line arguments using a helper class
            parsed = new SSHSearchDatabaseArguments(args);
        } catch (IllegalArgumentException e) {
            // If arguments are invalid, print error and exit
            System.err.println("failed " + e.getMessage());
            System.exit(1);
            return;
        }

        try (
            // Open a connection to the SQLite database provided by the user
            Connection conn = DriverManager.getConnection("jdbc:sqlite:" + parsed.getDatabase())
        ) {
            // Convert the tree type (e.g., accepted-ip) to a valid SQL table name (e.g., acceptedip)
            String table = parsed.getType().replace("-", "");//"-" is not a valid character in SQL table names

            // Build SQL query to select top N most frequent entries
            // The query selects the key and frequency from the specified table,
            // orders the results by frequency in descending order and key in ascending order,
            // and limits the results to the top N entries specified by the user.
            String query = "SELECT key, frequency " +
                           "FROM " + table + " " +
                           "ORDER BY frequency DESC, key ASC " +
                           "LIMIT ?";


            // Prepare the query and set the LIMIT value (top N)
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setInt(1, parsed.getTopFrequency());

            // Execute the query and obtain results
            ResultSet rs = stmt.executeQuery();

            // Print each result line in the format: <Key> <Frequency>
            while (rs.next()) {
                System.out.println(rs.getString("key") + " " + rs.getInt("frequency"));
            }

        } catch (SQLException e) {
            // If any database error occurs, report it and exit
            System.err.println("Database error: " + e.getMessage());
            System.exit(1);
        }
    }
}